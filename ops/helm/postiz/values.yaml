# Configuration for Postiz application using official Helm chart
# Based on: https://github.com/gitroomhq/postiz-helmchart
#
# This chart deploys Postiz using the official Helm chart from the Postiz project.
# It includes PostgreSQL and Redis as dependencies.

postiz-app:
  # Number of Postiz application replicas
  replicaCount: 1

  # Container image configuration
  image:
    repository: ghcr.io/gitroomhq/postiz-app
    pullPolicy: IfNotPresent
    tag: "latest"

  # Kubernetes service configuration
  service:
    type: ClusterIP
    port: 80

  # Ingress configuration for external access
  ingress:
    enabled: true
    className: "nginx"  # REQUIRED: Update based on your ingress controller
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      cert-manager.io/cluster-issuer: "letsencrypt-prod"  # REQUIRED: Update based on your cert-manager setup
    hosts:
      - host: postiz.example.com  # REQUIRED: Update with your domain
        paths:
          - path: /
            pathType: Prefix
            port: 80
    tls:
      - secretName: postiz-tls
        hosts:
          - postiz.example.com  # REQUIRED: Update with your domain

  # PostgreSQL database configuration
  postgresql:
    enabled: true
    auth:
      username: postiz
      password: postiz-password  # REQUIRED: Change in production
      database: postiz
    primary:
      persistence:
        enabled: true
        size: 8Gi
        storageClass: ""  # REQUIRED: Set your storage class (e.g., "gp2", "standard", "fast-ssd")

  # Redis cache configuration
  redis:
    enabled: true
    auth:
      password: postiz-redis-password  # REQUIRED: Change in production
    master:
      persistence:
        enabled: true
        size: 8Gi
        storageClass: ""  # REQUIRED: Set your storage class (e.g., "gp2", "standard", "fast-ssd")

  # Application environment variables
  env:
    FRONTEND_URL: "https://postiz.example.com"  # REQUIRED: Update with your domain
    NEXT_PUBLIC_BACKEND_URL: "https://postiz.example.com/api"  # REQUIRED: Update with your domain
    BACKEND_INTERNAL_URL: "http://backend:3000"
    IS_GENERAL: "true"
    DISABLE_REGISTRATION: "false"  # Set to "true" to disable user registration

  # Sensitive environment variables (stored in Kubernetes Secrets)
  secrets:
    # Database connection string (auto-generated based on PostgreSQL config)
    DATABASE_URL: "postgresql://postiz:postiz-password@postiz-postgresql:5432/postiz"
    
    # Redis connection string (auto-generated based on Redis config)
    REDIS_URL: "redis://:postiz-redis-password@postiz-redis-master:6379"
    
    # JWT secret for authentication (REQUIRED: Generate a secure random string)
    JWT_SECRET: ""  # REQUIRED: Set a secure JWT secret (e.g., run: openssl rand -base64 32)
    
    # Social media API keys (optional but recommended for full functionality)
    X_API_KEY: ""
    X_API_SECRET: ""
    LINKEDIN_CLIENT_ID: ""
    LINKEDIN_CLIENT_SECRET: ""
    REDDIT_CLIENT_ID: ""
    REDDIT_CLIENT_SECRET: ""
    GITHUB_CLIENT_ID: ""
    GITHUB_CLIENT_SECRET: ""
    
    # Email notification configuration (optional)
    RESEND_API_KEY: ""
    
    # Cloud storage configuration (optional - for media uploads)
    CLOUDFLARE_ACCOUNT_ID: ""
    CLOUDFLARE_ACCESS_KEY: ""
    CLOUDFLARE_SECRET_ACCESS_KEY: ""
    CLOUDFLARE_BUCKETNAME: ""
    CLOUDFLARE_BUCKET_URL: ""

  # Resource limits and requests
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

  # Horizontal Pod Autoscaler configuration
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80

  # Advanced scheduling configuration
  nodeSelector: {}
  tolerations: []
  affinity: {}